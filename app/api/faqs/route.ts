import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';

export async function GET(request: NextRequest) {
  try {
    console.log('üîç R√©cup√©ration des FAQ depuis Supabase...');

    const { data: faqs, error } = await supabase
      .from('faqs')
      .select('*')
      .eq('is_active', true)
      .order('created_at', { ascending: true });

    if (error) {
      console.error('‚ùå Erreur Supabase:', error);
      throw error;
    }

    console.log(`‚úÖ ${faqs?.length || 0} FAQ trouv√©es`);

    // Si aucune FAQ trouv√©e, retourner les donn√©es mock
    if (!faqs || faqs.length === 0) {
      console.log('‚ö†Ô∏è  Aucune FAQ trouv√©e, utilisation des donn√©es mock');
      const mockFAQs = [
        {
          id: 1,
          quest: 'Comment fonctionne le syst√®me de r√©servation ?',
          ans: 'Vous pouvez r√©server une s√©ance en choisissant votre tuteur, la mati√®re, le niveau et l\'horaire qui vous convient. Le paiement se fait en ligne de mani√®re s√©curis√©e.'
        },
        {
          id: 2,
          quest: 'Puis-je annuler une s√©ance ?',
          ans: 'Oui, vous pouvez annuler une s√©ance jusqu\'√† 24h avant le d√©but. Au-del√†, des frais d\'annulation peuvent s\'appliquer.'
        },
        {
          id: 3,
          quest: 'Comment sont s√©lectionn√©s les tuteurs ?',
          ans: 'Tous nos tuteurs sont dipl√¥m√©s et exp√©riment√©s. Ils passent un processus de s√©lection rigoureux incluant des tests de comp√©tences et des entretiens.'
        }
      ];
      return NextResponse.json(mockFAQs);
    }

    // Transformer les donn√©es Supabase en format attendu
    const formattedFAQs = faqs.map((faq: any, index: number) => ({
      id: index + 1,
      quest: faq.question,
      ans: faq.answer
    }));

    return NextResponse.json(formattedFAQs);
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des FAQ:', error);
    return NextResponse.json(
      { error: 'Erreur lors de la r√©cup√©ration des FAQ' },
      { status: 500 }
    );
  }
}
