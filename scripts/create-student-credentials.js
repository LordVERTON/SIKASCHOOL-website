const bcrypt = require('bcryptjs');

// Fonction pour g√©n√©rer un mot de passe al√©atoire
function generateRandomPassword() {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*';
  let password = '';
  
  // Assurer au moins un caract√®re de chaque type
  password += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'[Math.floor(Math.random() * 26)]; // Majuscule
  password += 'abcdefghijklmnopqrstuvwxyz'[Math.floor(Math.random() * 26)]; // Minuscule
  password += '0123456789'[Math.floor(Math.random() * 10)]; // Chiffre
  password += '!@#$%^&*'[Math.floor(Math.random() * 8)]; // Symbole
  
  // Compl√©ter avec des caract√®res al√©atoires
  for (let i = 4; i < 12; i++) {
    password += chars[Math.floor(Math.random() * chars.length)];
  }
  
  // M√©langer le mot de passe
  return password.split('').sort(() => Math.random() - 0.5).join('');
}

// √âl√®ves avec leurs informations
const students = [
  {
    id: '1',
    firstName: 'Liele',
    lastName: 'Ghoma',
    email: 'liele.ghoma@sikaschool.com',
    role: 'STUDENT',
    level: 'CE2',
    needs: ['Maths', 'Aide aux devoirs', 'Fran√ßais', 'Histoire']
  },
  {
    id: '2', 
    firstName: 'Steve',
    lastName: 'Kenfack',
    email: 'steve.kenfack@sikaschool.com',
    role: 'STUDENT',
    level: 'Sup√©rieur',
    needs: ['M√©canique', '√âlectronique', 'Informatique', 'Thermodynamique', '√âlectromagn√©tisme']
  },
  {
    id: '3',
    firstName: 'Milly',
    lastName: 'Koula',
    email: 'milly.koula@sikaschool.com',
    role: 'STUDENT',
    level: 'Sup√©rieur',
    needs: ['Pr√©paration au concours de l\'IAE']
  }
];

async function createStudentCredentials() {
  console.log('=== Cr√©ation des credentials pour les √©l√®ves ===\n');
  
  const credentials = [];

  for (const student of students) {
    const password = generateRandomPassword();
    const hashedPassword = await bcrypt.hash(password, 12);
    
    credentials.push({
      student,
      password,
      hashedPassword
    });
    
    console.log(`üë®‚Äçüéì ${student.firstName} ${student.lastName}`);
    console.log(`   üìß Email: ${student.email}`);
    console.log(`   üîë Mot de passe: ${password}`);
    console.log(`   üìö Niveau: ${student.level}`);
    console.log(`   üéØ Besoins: ${student.needs.join(', ')}`);
    console.log(`   üîê Hash: ${hashedPassword}`);
    console.log('');
  }

  // G√©n√©rer le fichier SQL
  console.log('=== G√©n√©ration du fichier SQL ===\n');
  
  let sqlContent = `-- =============================================
-- Insertion des √©l√®ves SikaSchool dans Supabase
-- =============================================

-- Insertion des utilisateurs √©l√®ves
INSERT INTO users (id, email, first_name, last_name, role, is_active, created_at, updated_at) VALUES
`;

  // Ajouter les utilisateurs
  for (let i = 0; i < credentials.length; i++) {
    const { student } = credentials[i];
    const comma = i < credentials.length - 1 ? ',' : ';';
    sqlContent += `  (uuid_generate_v4(), '${student.email}', '${student.firstName}', '${student.lastName}', '${student.role}', true, NOW(), NOW())${comma}\n`;
  }

  sqlContent += `
-- Insertion des credentials (mots de passe hash√©s)
INSERT INTO user_credentials (user_id, credential_type, credential_value, is_active, created_at, updated_at) VALUES
`;

  // Ajouter les credentials
  for (let i = 0; i < credentials.length; i++) {
    const { student, hashedPassword } = credentials[i];
    const comma = i < credentials.length - 1 ? ',' : ';';
    sqlContent += `  ((SELECT id FROM users WHERE email = '${student.email}'), 'password', '${hashedPassword}', true, NOW(), NOW())${comma}\n`;
  }

  sqlContent += `
-- Insertion des profils √©l√®ves d√©taill√©s
INSERT INTO students (user_id, level, subjects_of_interest, learning_goals, created_at, updated_at) VALUES
`;

  // Ajouter les profils √©l√®ves
  for (let i = 0; i < credentials.length; i++) {
    const { student } = credentials[i];
    const subjectsArray = student.needs.map(need => `'${need}'`).join(', ');
    const comma = i < credentials.length - 1 ? ',' : ';';
    sqlContent += `  ((SELECT id FROM users WHERE email = '${student.email}'), '${student.level}', ARRAY[${subjectsArray}], 'Progression et r√©ussite scolaire', NOW(), NOW())${comma}\n`;
  }

  sqlContent += `
-- =============================================
-- CREDENTIALS POUR LES √âL√àVES
-- =============================================
-- Conservez ces informations en s√©curit√© :

`;

  // Ajouter les credentials en clair
  for (const { student, password } of credentials) {
    sqlContent += `-- ${student.firstName} ${student.lastName}:
--   Email: ${student.email}
--   Mot de passe: ${password}
--   Niveau: ${student.level}
--   Besoins: ${student.needs.join(', ')}

`;
  }

  sqlContent += `-- =============================================`;

  // √âcrire le fichier
  const fs = require('fs');
  fs.writeFileSync('supabase/student-credentials.sql', sqlContent);
  
  console.log('‚úÖ Fichier SQL g√©n√©r√©: supabase/student-credentials.sql');
  console.log('\nüìã R√©sum√© des √©l√®ves cr√©√©s:');
  console.log('=====================================\n');
  
  for (const { student, password } of credentials) {
    console.log(`üë®‚Äçüéì ${student.firstName} ${student.lastName}`);
    console.log(`   üìß Email: ${student.email}`);
    console.log(`   üîë Mot de passe: ${password}`);
    console.log(`   üìö Niveau: ${student.level}`);
    console.log(`   üéØ Besoins: ${student.needs.join(', ')}`);
    console.log('');
  }
}

createStudentCredentials();
